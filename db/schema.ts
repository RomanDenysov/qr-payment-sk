import { relations } from 'drizzle-orm';
import {
  boolean,
  index,
  integer,
  pgSequence,
  pgTableCreator,
  text,
  timestamp,
  uuid,
  varchar,
} from 'drizzle-orm/pg-core';

const createTable = pgTableCreator((name) => `sk_${name}`);

// Variable symbol sequence for generating unique payment identifiers
// Starts at 10000000 (8 digits) and can go up to 9999999999 (10 digits)
export const variableSymbolSequence = pgSequence('variable_symbol_seq', {
  startWith: 10000000, // Start with 8-digit numbers
  maxValue: 9999999999, // Max 10 digits (Slovak banking standard)
  cycle: false, // Don't cycle back to start when maxValue is reached
});

// Optional business profiles - only created when users need business features
// This stores data that can't be stored in Clerk (preferences, business settings, etc.)
export const businessProfilesTable = createTable(
  'business_profiles',
  {
    id: uuid().primaryKey().defaultRandom(),
    clerkId: varchar('clerk_id', { length: 100 }).unique().notNull(), // Direct reference to Clerk user
    businessName: varchar('business_name', { length: 200 }).notNull(),
    businessType: varchar('business_type', { length: 50 }), // 'individual', 'company', 'ngo'
    vatNumber: varchar('vat_number', { length: 20 }), // Slovak IČ DPH
    registrationNumber: varchar('registration_number', { length: 20 }), // Slovak IČO

    // Preferences that can't be stored in Clerk
    defaultCurrency: varchar('default_currency', { length: 3 }).default('EUR'),

    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
  },
  (table) => [index('idx_business_profiles_clerk_id').on(table.clerkId)]
);

// User IBANs - directly reference Clerk user ID
export const userIbansTable = createTable(
  'user_ibans',
  {
    id: uuid().primaryKey().defaultRandom(),
    clerkId: varchar('clerk_id', { length: 100 }).notNull(), // Direct reference to Clerk user
    iban: varchar('iban', { length: 34 }).notNull(), // Slovak IBAN format
    bankName: varchar('bank_name', { length: 100 }), // e.g., "VÚB Banka", "Slovenská sporiteľňa"
    accountName: varchar('account_name', { length: 100 }), // e.g., "Business Account", "Personal"
    isDefault: boolean('is_default').default(false).notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
  },
  (table) => [
    index('idx_user_ibans_clerk_id_active').on(table.clerkId, table.isActive),
    index('idx_user_ibans_clerk_id_default').on(table.clerkId, table.isDefault),
  ]
);

// Payment templates - directly reference Clerk user ID
export const paymentTemplatesTable = createTable(
  'payment_templates',
  {
    id: uuid().primaryKey().defaultRandom(),
    clerkId: varchar('clerk_id', { length: 100 }).notNull(), // Direct reference to Clerk user
    sortOrder: integer('sort_order').default(0).notNull(),
    name: varchar('name', { length: 100 }).notNull(),
    amount: integer('amount').notNull(), // Amount in cents (e.g. 2550 = €25.50)
    description: text('description'),
    userIbanId: uuid('user_iban_id').references(() => userIbansTable.id, {
      onDelete: 'restrict',
    }),
    color: varchar('color', { length: 20 }).default('#3b82f6'),
    icon: varchar('icon', { length: 50 }).default('payment'),
    usageCount: integer('usage_count').default(0).notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
  },
  (table) => [
    index('idx_payment_templates_clerk_id_active').on(
      table.clerkId,
      table.isActive
    ),
    index('idx_payment_templates_usage_count').on(table.usageCount),
  ]
);

// QR generations - directly reference Clerk user ID
export const qrGenerationsTable = createTable(
  'qr_generations',
  {
    id: uuid().primaryKey().defaultRandom(),
    clerkId: varchar('clerk_id', { length: 100 }).notNull(), // Direct reference to Clerk user
    templateId: uuid('template_id').references(() => paymentTemplatesTable.id, {
      onDelete: 'set null',
    }),
    templateName: varchar('template_name', { length: 100 }).notNull(), // Preserved if template deleted
    amount: integer('amount').notNull(), // Amount in cents (e.g. 2550 = €25.50)
    variableSymbol: varchar('variable_symbol', { length: 10 })
      .unique()
      .notNull(), // Unique 1-10 digit identifier as string
    qrData: text('qr_data').notNull(), // Generated BySquare QR string
    iban: varchar('iban', { length: 34 }).notNull(),
    userIbanId: uuid('user_iban_id').references(() => userIbansTable.id, {
      onDelete: 'set null',
    }), // Reference to the IBAN used for this QR generation
    note: text('note'),
    generatedAt: timestamp('generated_at').defaultNow().notNull(),
  },
  (table) => [
    index('idx_qr_generations_clerk_id_date').on(
      table.clerkId,
      table.generatedAt
    ),
    index('idx_qr_generations_variable_symbol').on(table.variableSymbol),
    index('idx_qr_generations_template_id').on(table.templateId),
    index('idx_qr_generations_user_iban').on(table.userIbanId),
  ]
);

// Define relationships for Drizzle ORM
export const businessProfilesRelations = relations(
  businessProfilesTable,
  ({ many }) => ({
    paymentTemplates: many(paymentTemplatesTable),
    qrGenerations: many(qrGenerationsTable),
    ibans: many(userIbansTable),
  })
);

export const userIbansRelations = relations(
  userIbansTable,
  ({ one, many }) => ({
    businessProfile: one(businessProfilesTable, {
      fields: [userIbansTable.clerkId],
      references: [businessProfilesTable.clerkId],
    }),
    paymentTemplates: many(paymentTemplatesTable),
    qrGenerations: many(qrGenerationsTable),
  })
);

export const paymentTemplatesRelations = relations(
  paymentTemplatesTable,
  ({ one, many }) => ({
    businessProfile: one(businessProfilesTable, {
      fields: [paymentTemplatesTable.clerkId],
      references: [businessProfilesTable.clerkId],
    }),
    userIban: one(userIbansTable, {
      fields: [paymentTemplatesTable.userIbanId],
      references: [userIbansTable.id],
    }),
    qrGenerations: many(qrGenerationsTable),
  })
);

export const qrGenerationsRelations = relations(
  qrGenerationsTable,
  ({ one }) => ({
    businessProfile: one(businessProfilesTable, {
      fields: [qrGenerationsTable.clerkId],
      references: [businessProfilesTable.clerkId],
    }),
    template: one(paymentTemplatesTable, {
      fields: [qrGenerationsTable.templateId],
      references: [paymentTemplatesTable.id],
    }),
    userIban: one(userIbansTable, {
      fields: [qrGenerationsTable.userIbanId],
      references: [userIbansTable.id],
    }),
  })
);

// Type exports for use throughout the application
export type BusinessProfile = typeof businessProfilesTable.$inferSelect;
export type NewBusinessProfile = typeof businessProfilesTable.$inferInsert;

export type UserIban = typeof userIbansTable.$inferSelect;
export type NewUserIban = typeof userIbansTable.$inferInsert;

export type PaymentTemplate = typeof paymentTemplatesTable.$inferSelect;
export type NewPaymentTemplate = typeof paymentTemplatesTable.$inferInsert;

export type QrGeneration = typeof qrGenerationsTable.$inferSelect;
export type NewQrGeneration = typeof qrGenerationsTable.$inferInsert;
