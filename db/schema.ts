import { relations } from 'drizzle-orm';
import {
  bigint,
  boolean,
  decimal,
  index,
  integer,
  pgTableCreator,
  text,
  timestamp,
  uuid,
  varchar,
} from 'drizzle-orm/pg-core';

const createTable = pgTableCreator((name) => `sk_${name}`);

// User profiles - business-specific data (Clerk manages the actual user entity)
export const profilesTable = createTable(
  'profiles',
  {
    id: uuid().primaryKey().defaultRandom(),
    clerkId: varchar('clerk_id', { length: 100 }).unique().notNull(),
    email: varchar('email', { length: 255 }).unique().notNull(),
    businessName: varchar('business_name', { length: 200 }),
    defaultIban: varchar('default_iban', { length: 34 }), // Optional default Slovak IBAN
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
  },
  (table) => [
    index('idx_profiles_clerk_id').on(table.clerkId),
    index('idx_profiles_email').on(table.email),
  ]
);

// Payment templates - store only data, no pre-generated QR codes
export const paymentTemplatesTable = createTable(
  'payment_templates',
  {
    id: uuid().primaryKey().defaultRandom(),
    userId: uuid('user_id')
      .references(() => profilesTable.id, { onDelete: 'cascade' })
      .notNull(),
    name: varchar('name', { length: 100 }).notNull(),
    amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),
    description: text('description'),
    iban: varchar('iban', { length: 34 }).notNull(), // Slovak IBAN format
    color: varchar('color', { length: 20 }).default('#blue'),
    icon: varchar('icon', { length: 50 }).default('payment'),
    usageCount: integer('usage_count').default(0).notNull(),
    isActive: boolean('is_active').default(true).notNull(),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
  },
  (table) => [
    index('idx_payment_templates_user_active').on(table.userId, table.isActive),
    index('idx_payment_templates_usage_count').on(table.usageCount),
  ]
);

// QR generations - transaction history for analytics and tracking
export const qrGenerationsTable = createTable(
  'qr_generations',
  {
    id: uuid().primaryKey().defaultRandom(),
    userId: uuid('user_id')
      .references(() => profilesTable.id, { onDelete: 'cascade' })
      .notNull(),
    templateId: uuid('template_id').references(() => paymentTemplatesTable.id, {
      onDelete: 'set null',
    }),
    templateName: varchar('template_name', { length: 100 }).notNull(), // Preserved if template deleted
    amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),
    variableSymbol: bigint('variable_symbol', { mode: 'bigint' })
      .unique()
      .notNull(), // Unique 8-digit identifier
    qrData: text('qr_data').notNull(), // Generated BySquare QR string
    iban: varchar('iban', { length: 34 }).notNull(),
    description: text('description'),
    generatedAt: timestamp('generated_at').defaultNow().notNull(),
    status: varchar('status', { length: 20 }).default('generated').notNull(), // generated, shown, paid
  },
  (table) => [
    index('idx_qr_generations_user_date').on(table.userId, table.generatedAt),
    index('idx_qr_generations_variable_symbol').on(table.variableSymbol),
    index('idx_qr_generations_template_id').on(table.templateId),
    index('idx_qr_generations_status').on(table.status),
  ]
);

// Define relationships for Drizzle ORM
export const profilesRelations = relations(profilesTable, ({ many }) => ({
  paymentTemplates: many(paymentTemplatesTable),
  qrGenerations: many(qrGenerationsTable),
}));

export const paymentTemplatesRelations = relations(
  paymentTemplatesTable,
  ({ one, many }) => ({
    profile: one(profilesTable, {
      fields: [paymentTemplatesTable.userId],
      references: [profilesTable.id],
    }),
    qrGenerations: many(qrGenerationsTable),
  })
);

export const qrGenerationsRelations = relations(
  qrGenerationsTable,
  ({ one }) => ({
    profile: one(profilesTable, {
      fields: [qrGenerationsTable.userId],
      references: [profilesTable.id],
    }),
    template: one(paymentTemplatesTable, {
      fields: [qrGenerationsTable.templateId],
      references: [paymentTemplatesTable.id],
    }),
  })
);

// Type exports for use throughout the application
export type Profile = typeof profilesTable.$inferSelect;
export type NewProfile = typeof profilesTable.$inferInsert;

export type PaymentTemplate = typeof paymentTemplatesTable.$inferSelect;
export type NewPaymentTemplate = typeof paymentTemplatesTable.$inferInsert;

export type QrGeneration = typeof qrGenerationsTable.$inferSelect;
export type NewQrGeneration = typeof qrGenerationsTable.$inferInsert;
